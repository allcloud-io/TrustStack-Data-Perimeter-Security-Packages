/**
 * TypeScript definitions for AWS::SecurityHub::Insight
 * Generated from CloudFormation Resource Schema
 */

/**
 * The AWS::SecurityHub::Insight resource represents the AWS Security Hub Insight in your account. An AWS Security Hub insight is a collection of related findings.
 */
export namespace AWS_SecurityHub_Insight {
  /**
   * Non-empty string definition.
   */
  export type NonEmptyStringType = {};

  /**
   * A date filter for querying findings.
   */
  export type DateFilterType = {
    DateRange?: DateRangeType;

    End?: ISO8601DateStringType;

    Start?: ISO8601DateStringType;
  };

  /**
   * A date range for the date filter.
   */
  export type DateRangeType = {
    /**
     * A date range unit for the date filter.
     */
    Unit: string;

    /**
     * A date range value for the date filter.
     */
    Value: number;
  };

  /**
   * The date and time, in UTC and ISO 8601 format.
   */
  export type ISO8601DateStringType = {};

  /**
   * A number filter for querying findings.
   */
  export type NumberFilterType = {
    /**
     * The equal-to condition to be applied to a single field when querying for findings.
     */
    Eq?: number;

    /**
     * The greater-than-equal condition to be applied to a single field when querying for findings.
     */
    Gte?: number;

    /**
     * The less-than-equal condition to be applied to a single field when querying for findings.
     */
    Lte?: number;
  };

  /**
   * A string filter for filtering AWS Security Hub findings.
   */
  export type StringFilterType = {
    Comparison: StringFilterComparisonType;

    Value: NonEmptyStringType;
  };

  /**
   * The condition to apply to a string value when filtering Security Hub findings.
   */
  export type StringFilterComparisonType = {};

  /**
   * A map filter for filtering AWS Security Hub findings.
   */
  export type MapFilterType = {
    /**
     * The condition to apply to the key value when filtering Security Hub findings with a map filter.
     */
    Comparison: string;

    Key: NonEmptyStringType;

    Value: NonEmptyStringType;
  };

  /**
   * The IP filter for querying findings.
   */
  export type IpFilterType = {
    /**
     * A finding's CIDR value.
     */
    Cidr: NonEmptyStringType;
  };

  /**
   * A keyword filter for querying findings.
   */
  export type KeywordFilterType = {
    /**
     * A value for the keyword.
     */
    Value: NonEmptyStringType;
  };

  /**
   * Boolean filter for querying findings.
   */
  export type BooleanFilterType = {
    /**
     * The value of the boolean.
     */
    Value: boolean;
  };

  /**
   * A collection of filters that are applied to all active findings aggregated by AWS Security Hub.
   */
  export type AwsSecurityFindingFiltersType = {
    /**
     * The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.
     */
    ProductArn?: StringFilterType[];

    /**
     * The AWS account ID in which a finding is generated.
     */
    AwsAccountId?: StringFilterType[];

    /**
     * The name of the AWS account in which a finding is generated.
     */
    AwsAccountName?: StringFilterType[];

    /**
     * The security findings provider-specific identifier for a finding.
     */
    Id?: StringFilterType[];

    /**
     * The identifier for the solution-specific component (a discrete unit of logic) that generated a finding.
     */
    GeneratorId?: StringFilterType[];

    /**
     * A finding type in the format of namespace/category/classifier that classifies a finding.
     */
    Type?: StringFilterType[];

    /**
     * The Region from which the finding was generated.
     */
    Region?: StringFilterType[];

    /**
     * An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.
     */
    FirstObservedAt?: DateFilterType[];

    /**
     * An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.
     */
    LastObservedAt?: DateFilterType[];

    /**
     * An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.
     */
    CreatedAt?: DateFilterType[];

    /**
     * An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record.
     */
    UpdatedAt?: DateFilterType[];

    /**
     * The label of a finding's severity.
     */
    SeverityLabel?: StringFilterType[];

    /**
     * A finding's confidence.
     */
    Confidence?: NumberFilterType[];

    /**
     * The level of importance assigned to the resources associated with the finding.
     */
    Criticality?: NumberFilterType[];

    /**
     * A finding's title.
     */
    Title?: StringFilterType[];

    /**
     * A finding's description.
     */
    Description?: StringFilterType[];

    /**
     * The recommendation of what to do about the issue described in a finding.
     */
    RecommendationText?: StringFilterType[];

    /**
     * A URL that links to a page about the current finding in the security findings provider's solution.
     */
    SourceUrl?: StringFilterType[];

    /**
     * A data type where security findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format.
     */
    ProductFields?: MapFilterType[];

    /**
     * The name of the solution (product) that generates findings.
     */
    ProductName?: StringFilterType[];

    /**
     * The name of the findings provider (company) that owns the solution (product) that generates findings.
     */
    CompanyName?: StringFilterType[];

    /**
     * A list of name/value string pairs associated with the finding.
     */
    UserDefinedFields?: MapFilterType[];

    /**
     * The name of the malware that was observed.
     */
    MalwareName?: StringFilterType[];

    /**
     * The type of the malware that was observed.
     */
    MalwareType?: StringFilterType[];

    /**
     * The filesystem path of the malware that was observed.
     */
    MalwarePath?: StringFilterType[];

    /**
     * The state of the malware that was observed.
     */
    MalwareState?: StringFilterType[];

    /**
     * Indicates the direction of network traffic associated with a finding.
     */
    NetworkDirection?: StringFilterType[];

    /**
     * The protocol of network-related information about a finding.
     */
    NetworkProtocol?: StringFilterType[];

    /**
     * The source IPv4 address of network-related information about a finding.
     */
    NetworkSourceIpV4?: IpFilterType[];

    /**
     * The source IPv6 address of network-related information about a finding.
     */
    NetworkSourceIpV6?: IpFilterType[];

    /**
     * The source port of network-related information about a finding.
     */
    NetworkSourcePort?: NumberFilterType[];

    /**
     * The source domain of network-related information about a finding.
     */
    NetworkSourceDomain?: StringFilterType[];

    /**
     * The source media access control (MAC) address of network-related information about a finding.
     */
    NetworkSourceMac?: StringFilterType[];

    /**
     * The destination IPv4 address of network-related information about a finding.
     */
    NetworkDestinationIpV4?: IpFilterType[];

    /**
     * The destination IPv6 address of network-related information about a finding.
     */
    NetworkDestinationIpV6?: IpFilterType[];

    /**
     * The destination port of network-related information about a finding.
     */
    NetworkDestinationPort?: NumberFilterType[];

    /**
     * The destination domain of network-related information about a finding.
     */
    NetworkDestinationDomain?: StringFilterType[];

    /**
     * The name of the process.
     */
    ProcessName?: StringFilterType[];

    /**
     * The path to the process executable.
     */
    ProcessPath?: StringFilterType[];

    /**
     * The process ID.
     */
    ProcessPid?: NumberFilterType[];

    /**
     * The parent process ID.
     */
    ProcessParentPid?: NumberFilterType[];

    /**
     * A timestamp that identifies when the process was launched.
     */
    ProcessLaunchedAt?: DateFilterType[];

    /**
     * A timestamp that identifies when the process was terminated.
     */
    ProcessTerminatedAt?: DateFilterType[];

    /**
     * The type of a threat intelligence indicator.
     */
    ThreatIntelIndicatorType?: StringFilterType[];

    /**
     * The value of a threat intelligence indicator.
     */
    ThreatIntelIndicatorValue?: StringFilterType[];

    /**
     * The category of a threat intelligence indicator.
     */
    ThreatIntelIndicatorCategory?: StringFilterType[];

    /**
     * A timestamp that identifies the last observation of a threat intelligence indicator.
     */
    ThreatIntelIndicatorLastObservedAt?: DateFilterType[];

    /**
     * The source of the threat intelligence.
     */
    ThreatIntelIndicatorSource?: StringFilterType[];

    /**
     * The URL for more details from the source of the threat intelligence.
     */
    ThreatIntelIndicatorSourceUrl?: StringFilterType[];

    /**
     * Specifies the type of the resource that details are provided for.
     */
    ResourceType?: StringFilterType[];

    /**
     * The canonical identifier for the given resource type.
     */
    ResourceId?: StringFilterType[];

    /**
     * The canonical AWS partition name that the Region is assigned to.
     */
    ResourcePartition?: StringFilterType[];

    /**
     * The canonical AWS external Region name where this resource is located.
     */
    ResourceRegion?: StringFilterType[];

    /**
     * A list of AWS tags associated with a resource at the time the finding was processed.
     */
    ResourceTags?: MapFilterType[];

    /**
     * The instance type of the instance.
     */
    ResourceAwsEc2InstanceType?: StringFilterType[];

    /**
     * The Amazon Machine Image (AMI) ID of the instance.
     */
    ResourceAwsEc2InstanceImageId?: StringFilterType[];

    /**
     * The IPv4 addresses associated with the instance.
     */
    ResourceAwsEc2InstanceIpV4Addresses?: IpFilterType[];

    /**
     * The IPv6 addresses associated with the instance.
     */
    ResourceAwsEc2InstanceIpV6Addresses?: IpFilterType[];

    /**
     * The key name associated with the instance.
     */
    ResourceAwsEc2InstanceKeyName?: StringFilterType[];

    /**
     * The IAM profile ARN of the instance.
     */
    ResourceAwsEc2InstanceIamInstanceProfileArn?: StringFilterType[];

    /**
     * The identifier of the VPC that the instance was launched in.
     */
    ResourceAwsEc2InstanceVpcId?: StringFilterType[];

    /**
     * The identifier of the subnet that the instance was launched in.
     */
    ResourceAwsEc2InstanceSubnetId?: StringFilterType[];

    /**
     * The date and time the instance was launched.
     */
    ResourceAwsEc2InstanceLaunchedAt?: DateFilterType[];

    /**
     * The canonical user ID of the owner of the S3 bucket.
     */
    ResourceAwsS3BucketOwnerId?: StringFilterType[];

    /**
     * The display name of the owner of the S3 bucket.
     */
    ResourceAwsS3BucketOwnerName?: StringFilterType[];

    /**
     * The status of the IAM access key related to a finding.
     */
    ResourceAwsIamAccessKeyStatus?: StringFilterType[];

    /**
     * The creation date/time of the IAM access key related to a finding.
     */
    ResourceAwsIamAccessKeyCreatedAt?: DateFilterType[];

    /**
     * The name of the container related to a finding.
     */
    ResourceContainerName?: StringFilterType[];

    /**
     * The identifier of the image related to a finding.
     */
    ResourceContainerImageId?: StringFilterType[];

    /**
     * The name of the image related to a finding.
     */
    ResourceContainerImageName?: StringFilterType[];

    /**
     * A timestamp that identifies when the container was started.
     */
    ResourceContainerLaunchedAt?: DateFilterType[];

    /**
     * The details of a resource that doesn't have a specific subfield for the resource type defined.
     */
    ResourceDetailsOther?: MapFilterType[];

    /**
     * Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard.
     */
    ComplianceStatus?: StringFilterType[];

    /**
     * The veracity of a finding.
     */
    VerificationState?: StringFilterType[];

    /**
     * The workflow state of a finding.
     */
    WorkflowState?: StringFilterType[];

    /**
     * The status of the investigation into a finding.
     */
    WorkflowStatus?: StringFilterType[];

    /**
     * The updated record state for the finding.
     */
    RecordState?: StringFilterType[];

    /**
     * The ARN of the solution that generated a related finding.
     */
    RelatedFindingsProductArn?: StringFilterType[];

    /**
     * The solution-generated identifier for a related finding.
     */
    RelatedFindingsId?: StringFilterType[];

    /**
     * The ARN of the application that is related to a finding.
     */
    ResourceApplicationArn?: StringFilterType[];

    /**
     * The name of the application that is related to a finding.
     */
    ResourceApplicationName?: StringFilterType[];

    /**
     * The text of a note.
     */
    NoteText?: StringFilterType[];

    /**
     * The timestamp of when the note was updated.
     */
    NoteUpdatedAt?: DateFilterType[];

    /**
     * The principal that created a note.
     */
    NoteUpdatedBy?: StringFilterType[];

    /**
     * Indicates whether or not sample findings are included in the filter results.
     */
    Sample?: BooleanFilterType[];

    /**
     * The unique identifier of a standard in which a control is enabled.
     */
    ComplianceAssociatedStandardsId?: StringFilterType[];

    /**
     * The unique identifier of a control across standards.
     */
    ComplianceSecurityControlId?: StringFilterType[];

    /**
     * The name of a security control parameter.
     */
    ComplianceSecurityControlParametersName?: StringFilterType[];

    /**
     * The current value of a security control parameter.
     */
    ComplianceSecurityControlParametersValue?: StringFilterType[];

    /**
     * The finding provider value for the finding confidence.
     */
    FindingProviderFieldsConfidence?: NumberFilterType[];

    /**
     * The finding provider value for the level of importance assigned to the resources associated with the findings.
     */
    FindingProviderFieldsCriticality?: NumberFilterType[];

    /**
     * The finding identifier of a related finding that is identified by the finding provider.
     */
    FindingProviderFieldsRelatedFindingsId?: StringFilterType[];

    /**
     * The ARN of the solution that generated a related finding that is identified by the finding provider.
     */
    FindingProviderFieldsRelatedFindingsProductArn?: StringFilterType[];

    /**
     * The finding provider value for the severity label.
     */
    FindingProviderFieldsSeverityLabel?: StringFilterType[];

    /**
     * The finding provider's original value for the severity.
     */
    FindingProviderFieldsSeverityOriginal?: StringFilterType[];

    /**
     * One or more finding types that the finding provider assigned to the finding.
     */
    FindingProviderFieldsTypes?: StringFilterType[];

    /**
     * The name of the principal that is associated with an IAM access key.
     */
    ResourceAwsIamAccessKeyPrincipalName?: StringFilterType[];

    /**
     * The name of an IAM user.
     */
    ResourceAwsIamUserUserName?: StringFilterType[];

    /**
     * Indicates whether a software vulnerability in your environment has a known exploit.
     */
    VulnerabilitiesExploitAvailable?: StringFilterType[];

    /**
     * Indicates whether a vulnerability is fixed in a newer version of the affected software packages.
     */
    VulnerabilitiesFixAvailable?: StringFilterType[];

    /**
     * A keyword for a finding.
     */
    Keyword?: KeywordFilterType[];

    /**
     * The user associated with the IAM access key related to a finding.
     */
    ResourceAwsIamAccessKeyUserName?: StringFilterType[];

    /**
     * The normalized severity of a finding.
     */
    SeverityNormalized?: NumberFilterType[];

    /**
     * The native severity as defined by the security findings provider's solution that generated the finding.
     */
    SeverityProduct?: NumberFilterType[];
  };

  /**
   * The AWS::SecurityHub::Insight resource represents the AWS Security Hub Insight in your account. An AWS Security Hub insight is a collection of related findings.
   */
  export type InsightResourceType = {
    /**
     * The ARN of a Security Hub insight
     * Read-only property
     */
    InsightArn?: string;

    /**
     * The name of a Security Hub insight
     */
    Name: string;

    /**
     * One or more attributes used to filter the findings included in the insight
     */
    Filters: AwsSecurityFindingFiltersType;

    /**
     * The grouping attribute for the insight's findings
     */
    GroupByAttribute: NonEmptyStringType;
  };
}
